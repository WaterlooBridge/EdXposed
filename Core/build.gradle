import org.gradle.internal.os.OperatingSystem

apply plugin: 'com.android.library'
apply from: file('module.gradle')

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        externalNativeBuild {
            cmake {
                arguments "-DMODULE_NAME:STRING=riru_$moduleId",
                        "-DRIRU_MODULE_API_VERSION=$moduleRiruApiVersion",
                        "-DRIRU_MODULE_VERSION=$moduleVersionCode",
                        "-DRIRU_MODULE_VERSION_NAME:STRING=\"$moduleVersion\""
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "jni/CMakeLists.txt"
        }
    }
}

def magiskDir = file("template_override")

afterEvaluate {

    android.libraryVariants.all { variant ->
        def nameCapped = variant.name.capitalize()
        def nameLowered = variant.name.toLowerCase()

        def prepareMagiskFilesTask = task("prepareMagiskFiles${nameCapped}", type: Copy, dependsOn: ":Bridge:makeAndCopy${nameCapped}") {
            // generate module.prop
            def modulePropText = ""
            magiskModuleProp.each { k, v -> modulePropText += "$k=$v\n" }
            modulePropText = modulePropText.trim()
            file("$magiskDir/module.prop").text = modulePropText

            // generate module.prop for Riru
            def riruModulePropText = ""
            moduleProp.each { k, v -> riruModulePropText += "$k=$v\n" }
            riruModulePropText = riruModulePropText.trim()
            file("$magiskDir/riru_module.prop").text = riruModulePropText
        }

        def zipTask = task("zip${nameCapped}", type: Exec, dependsOn: prepareMagiskFilesTask) {
            workingDir '..'
            commandLine '/bin/bash', 'build.sh',\
                    project.name,\
                    "$moduleVersion-${nameLowered}",\
                    "$moduleName"
        }

        def pushTask = task("push${nameCapped}", type: Exec) {
            workingDir 'release'
            def commands = ["adb", "push", "magisk-$moduleName" +
                    "-$moduleVersion-${nameLowered}.zip", "/sdcard/"]
            if (OperatingSystem.current().isWindows()) {
                commandLine 'cmd', '/c', commands.join(" ")
            } else {
                commandLine commands
            }
        }

        pushTask.dependsOn(zipTask)
    }

}